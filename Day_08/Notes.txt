# Time and Space complexity

1.Time Complexity:
-Time complexity of an algorithm quantifies the amount of time taken by
an algorithm to run as a function of the length of the input.
--------------------------------------------------------------------------

-Types Of Notations:

1. O-notation: It is used to denote asymptotic upper bound.
-For a given function g(n), we denote it by O(g(n)).
-Pronounced as ‚Äúbig-oh of g of n‚Äù.
-It is also known as WORST CASE time complexity as it denotes the upper bound in which the algorithm terminates.
-we use asymptotic notation like:
    O(1) ‚Üí Constant time
    O(log n) ‚Üí Logarithmic time
    O(n) ‚Üí Linear time
    O(n log n) ‚Üí Linearithmic time
    O(n¬≤) ‚Üí Quadratic time
    O(2^n), O(n!) ‚Üí Exponential / Factorial time
-It follows the following order in case of time complexity:(small ‚Üí big n)
O(1) < O(log n) < O(‚àön) < O(n) < O(n log log n) < O(n log n) < O(n¬≤) < O(n¬≥) < O(n!) < O(n‚Åø)

2. ‚Ñ¶-notation: It is used to denote asymptotic lower bound.
For a given function g(n), we denote it by ‚Ñ¶(g(n)).
Pronounced as ‚Äúbig-omega of g of n‚Äù.
It is also known as BEST CASE time complexity as it denotes the lower bound in which the algorithm terminates.

3. ùöØ-notation: It is used to denote the AVERAGE TIME of a program.

=====================================================================================================================

2.Space Complexity:
-Space complexity of an algorithm quantifies the amount of time taken by a program to run as a function of length of the input.
-It is directly proportional to the largest memory your program acquires at any instance during run time.
For example: int consumes 4 bytes of memory.
