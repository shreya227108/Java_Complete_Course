#Bit Manipulation

1.What is Bit Manipulation
-Bit manipulation means performing operations directly on binary digits (bits) of numbers.
-Since everything in the computer is stored in binary (0s and 1s), bit manipulation is very fast and memory efficient.

=========================================================================================================================

2.Basic Bitwise Operators (used in Bit Manipulation)

| Operator | Meaning                                | Example                          |
| -------- | -------------------------------------- | -------------------------------- |
| `&`      | AND (1 if both bits are 1)             | `5 & 3 → 0101 & 0011 = 0001 (1)` |
| `        | `                                      | OR (1 if at least one bit is 1)  |
| `^`      | XOR (1 if bits are different)          | `5 ^ 3 → 0101 ^ 0011 = 0110 (6)` |
| `~`      | NOT (flip bits, i.e., 0 → 1, 1 → 0)    | `~5 → ...1010 (−6)`              |
| `<<`     | Left shift (multiply by 2ⁿ)            | `5 << 1 → 10`                    |
| `>>`     | Right shift (divide by 2ⁿ, keeps sign) | `5 >> 1 → 2`                     |
| `>>>`    | Unsigned right shift (fills 0s)        | `−5 >>> 1 → large positive`      |

================================================================================================

3.Useful Bit Manipulation Tricks

1. Check if a number is odd or even(If last bit is 0, number is even, else odd.)
if((num & 1) == 0)
    System.out.println("Even");
else
    System.out.println("Odd");

----------------------------------------------------------------------------------------

2. Get ith Bit(To extract the bit at position i (0-based from right)):
int getIthBit(int num, int i) {
    int mask = 1 << i;
    return (num & mask) == 0 ? 0 : 1;
}

-----------------------------------------------------------------------------------------

3. Set ith Bit (make it 1)
int setIthBit(int num, int i) {
    int mask = 1 << i;
    return num | mask;
}

----------------------------------------------------------------------------------------

4. Clear ith Bit (make it 0)
int clearIthBit(int num, int i) {
    int mask = ~(1 << i);
    return num & mask;
}

----------------------------------------------------------------------------------------

5. Toggle ith Bit (flip 0 ↔ 1)
int toggleIthBit(int num, int i) {
    int mask = 1 << i;
    return num ^ mask;
}

------------------------------------------------------------------------------------------

6. Count Set Bits (Number of 1s in binary)(Brian Kernighan’s Algorithm)
int countSetBits(int num) {
    int count = 0;
    while(num > 0) {
        num = num & (num - 1); // clears the lowest set bit
        count++;
    }
    return count;
}

---------------------------------------------------------------------------------------------

7. Check if number is power of 2( Only one bit is set in power of 2 (e.g., 1,2,4,8,16).)
boolean isPowerOfTwo(int num) {
    return (num > 0) && ((num & (num - 1)) == 0);
}

---------------------------------------------------------------------------------------------

8. Swap two numbers without temp variable
a = a ^ b;
b = a ^ b;
a = a ^ b;

---------------------------------------------------------------------------------------------

9. Clear last set bit
num = num & (num - 1);

----------------------------------------------------------------------------------------------

10. Get rightmost set bit
int rmsb = num & -num;

----------------------------------------------------------------------------------------------
